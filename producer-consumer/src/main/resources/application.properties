#https://docs.spring.io/spring-cloud-stream/docs/current/reference/html/spring-cloud-stream.html
#https://docs.confluent.io/platform/current/quickstart/ce-docker-quickstart.html#ce-docker-quickstart

#producer
spring.cloud.stream.bindings.producerSender-out-0.producer.use-native-encoding=true
spring.cloud.stream.kafka.bindings.producerSender-out-0.producer.configuration.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.cloud.stream.kafka.bindings.producerSender-out-0.producer.configuration.key.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.cloud.stream.kafka.bindings.producerSender-out-0.producer.configuration.schema.registry.url=http://localhost:8081
spring.cloud.stream.source=producerSender
spring.cloud.stream.bindings.producerSender-out-0.destination=topico-dest
spring.cloud.stream.bindings.producerSender-out-0.producer.partitionCount=5


spring.cloud.function.definition=receive;uppercase

#consumer
spring.cloud.stream.bindings.receive-in-0.destination=topico-dest
spring.cloud.stream.bindings.receive-in-0.consumer.use-native-decoding=true
spring.cloud.stream.kafka.bindings.receive-in-0.consumer.configuration.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.cloud.stream.kafka.bindings.receive-in-0.consumer.configuration.key.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.cloud.stream.kafka.bindings.receive-in-0.consumer.configuration.schema.registry.url=http://localhost:8081
spring.cloud.stream.kafka.bindings.receive-in-0.consumer.configuration.specific.avro.reader=true
spring.cloud.stream.bindings.receive-in-0.group=grupo-topico-desc



#consumer 2
spring.cloud.stream.bindings.uppercase-in-0.destination=topico-dest
spring.cloud.stream.bindings.uppercase-in-0.group=grupo-topico-2
spring.cloud.stream.kafka.bindings.uppercase-in-0.consumer.configuration.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.cloud.stream.kafka.bindings.uppercase-in-0.consumer.configuration.key.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.cloud.stream.kafka.bindings.uppercase-in-0.consumer.configuration.schema.registry.url=http://localhost:8081
spring.cloud.stream.kafka.bindings.uppercase-in-0.consumer.configuration.specific.avro.reader=true

spring.cloud.stream.bindings.uppercase-out-0.destination=uppercase-out